using System.Collections;
using System.Collections.Generic;
using System.Data.SqlTypes;
using TMPro;
using Unity.VisualScripting;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.UI;

public class Demo : MonoBehaviour {
    public TMP_InputField UsernameInput;
    public TMP_InputField emailInput;
    public TMP_InputField passwordInput;
    public TMP_InputField addressInput;
    public TMP_InputField landmarkInput;
    public TMP_InputField username;
    public TMP_InputField password;
    public TMP_InputField Confirm;
    public TMP_Text Name;
    public TMP_Text Email;
    public TMP_Text Password;
    public TMP_Text Address;
    public TMP_Text Landmark;
    public TMP_Text InName;
    public TMP_Text InPass;
    public TMP_Text NotValidName;
    public TMP_Text OldPassword;
    public TMP_Text ConfirmPassword;
    public TMP_Text ResetSuccess;
    public TMP_Text RegisterSuccess;
    //public TMP_Text ForgetName;
    public TMP_Text ForgetEmail;
    public TMP_Text ForgetNewPass;
    // public TMP_Text AlreadyExists;
    //public TMP_Text ForgetCanformPass;

    //public GameObject FillTrue;
    //public GameObject FillFalse;
    //public GameObject FillEmail;
    //public GameObject FillEmailFalse;
    public GameObject Blank;
    public GameObject NotExits;
    public GameObject RegisterCanvas;
    public GameObject LoginCanvas;
    public GameObject UsernotExists;
    public GameObject LogOut;
    public GameObject Resetpassword;


    public int MinPassword = 6;
    public int MaxPassword = 8;
    public Button button;
    public GameObject ForgetCanvas;
    public TMP_InputField forgetname;
    public TMP_InputField forgetEmail;
    public TMP_InputField NewPassword;
    public Button Reset;
   
    //public Home home;
    public List<Users> usersList = new List<Users> ();

    // Start is called before the first frame update
    void Start () {
        passwordInput.onValueChanged.AddListener (ValidetePassword);
        NewPassword.onValueChanged.AddListener (ValidPassword);

    }

    // Update is called once per frame
    void Update () {

    }
    public  void FixFill () {
        if (UsernameInput.text == "") {
            Debug.Log ("! Please Fill Out This Fields");
            Name.text = "! Please Fill Out UserName Field";
            Name.color = Color.red;

        }
        if (emailInput.text == "") {
            Debug.Log ("! Please Fill Out This Fields");
            Email.text = "! Please Fill Out Email Field";
            Email.color = Color.red;

        }
        if (passwordInput.text == "") {
            Debug.Log ("! Please Fill Out This Fields");
            Password.text = "! Please Fill Out Password Field";
            Password.color = Color.red;

        }
        if (addressInput.text == "") {
            Debug.Log ("! Please Fill Out This Fields");
            Address.text = "! Please Fill Out Address Field";
            Address.color = Color.red;

        }
        if (landmarkInput.text == "") {
            Debug.Log ("! Please Fill Out This Fields");
            Landmark.text = "! Please Fill Out Landmark Field";
            Landmark.color = Color.red;

        }
        if (UsernameInput.text != "") {
            Debug.Log ("√  fully filled");
            Name.text = "√ Valid Username";
            Name.color = Color.green;

        }
        if (emailInput.text != "") {
            Debug.Log ("√  fully filled");
            Email.text = "√  Valid Email";
            Email.color = Color.green;

        }
        //if (passwordInput.text != "") {
        //    Debug.Log ("√  fully filled");
        //    Password.text = "√  Valid Password";
        //    Password.color = Color.green;


        //}
        if (addressInput.text != "") {
            Debug.Log ("√  fully filled");
            Address.text = "√  Valid Address";
            Address.color = Color.green;

        }
        if (landmarkInput.text != "") {
            Debug.Log ("√  fully filled");
            Landmark.text = "√  Valid Landmark";
            Landmark.color = Color.green;
        }

    }
    public void RegisterDemo () {
        string username = UsernameInput.text;
        string email = emailInput.text;
        string password = passwordInput.text;
        string address = addressInput.text;
        string landmark = landmarkInput.text;
        if (IsUsernameUnique (username)) {
            if (IsEmailUnique (email)) {
                Users newuser = new Users {
                    Username = username,
                    Password = password,
                    Email = email,
                    Address = address,
                    Landmark = landmark
                };


                if (UsernameInput.text != "" && passwordInput.text != "" && emailInput.text != "" && addressInput.text != "" && landmarkInput.text != ""  ) {
                    
                    Debug.Log ("User registered successly!");

                    RegisterSuccess.text = "√ User Registered Successly";
                    // home.ResetName ();
                    Name.text = "";
                    Password.text = "";
                    Email.text = "";
                    Address.text = "";
                    Landmark.text = "";
                    

                    RegisterCanvas.SetActive (false);
                    LoginCanvas.SetActive (true);
                    usersList.Add (newuser);
                    Invoke ("DisableRegisterCanvas", 1f);
                }

                


            } else {
                Debug.Log ("Email Already Exists. Choose a Different One");
                Email.text = "! Email already Exists. Choose a Different One";
                Email.color = Color.red;
                //register.SetActive (true);
                //Warning.text = "Email Already Exists. Choose a Different One";
                //Logincanvas.SetActive (false);
                //EmailNotAvailable.SetActive (true);

            }

        } else {
            Debug.Log ("Username already exists. Choose a different one.");
            //register.SetActive (true);
            Name.text = "! Username Already Exists. Choose a Different One";
            Name.color = Color.red;
            //Warning.text = "Username already exists. Choose a different one.";
            ////Logincanvas.SetActive (false);
            //NameNotAvailable.SetActive (true);


        }
    }

    private bool IsUsernameUnique (string name) {
        return !usersList.Exists (Users => Users.Username == name);
    }
    private bool IsEmailUnique (string email) {
        return !usersList.Exists (Users => Users.Email == email);
    }
    private void DeactivateName () {
        Name.text = "";

    }
    //private void DisableExistsCanvas () {
    //    Email.text = "";
    //}

    private void DisableRegisterCanvas () {
        RegisterSuccess.text = "";
    }
    //private void DeactivateEmail () {
    //    Email.text = "";

    //}
    //private void DeactivatePassword () {
    //    Password.text = "";

    //}
    //private void DeactivateAddress () {
    //    Address.text = "";

    //}
    //private void DeactivateLandmark () {
    //    Landmark.text = "";

    //}
    public void Login () {
        if (username.text != "") {
            Debug.Log ("! User Not Exits, Create One");
            Blank.SetActive (false);
            NotExits.SetActive (true);

        } else {
            NotExits.SetActive (false);
            Debug.Log ("! Please Enter User Name  And Password");
            Blank.SetActive (true);
        }
        

       
        foreach (Users user in usersList) {
       
           
            if (user.Username == username.text && user.Password == password.text) {
                NotExits.SetActive (false);
                Blank.SetActive (false);
                Debug.Log ("SuccessFully Login");
                RegisterSuccess.text = "√ SuccessFully Login";
                RegisterSuccess.color = Color.green;
                LoginCanvas.SetActive (false);
                LogOut.SetActive (true);

            }
		//else 	if (user.Username != username.text && username.text != "") {
		//		NotExits.SetActive (false);
		//		Blank.SetActive (false);
		//		Debug.Log ("! User Name Does Not Exists");
		//		InName.text = "! user name Does Not Exists";
		//		InName.color = Color.red;
		//		//UsernotExists.SetActive (true);


		//	}
           
            }

	}
    public void LogFill () {
        if (username.text == "") {
            NotExits.SetActive (false);
            Blank.SetActive (false);
            Debug.Log ("! Please Fill Out UserName Field");
            InName.text = "! Please Fill Out UserName Field";
            InName.color = Color.red;



        }
        if (password.text == "") {
            NotExits.SetActive (false);
            Blank.SetActive (false);
            Debug.Log ("! Please Fill Out Password Field");
            InPass.text = "! Please Fill Out Password Field";
            InPass.color = Color.red;


        }
        if (username.text != "") {
            NotExits.SetActive (false);
            Blank.SetActive (false);
            Debug.Log ("√  fully filled ");
            InName.text = "√  Valid Name ";
            InName.color = Color.green;



        }

        if (password.text != "") {
            NotExits.SetActive (false);
            Blank.SetActive (false);
            Debug.Log ("√  fully filled ");
            InPass.text = "√  Valid Password ";
            InPass.color = Color.green;


        }

			//     foreach (Users users in usersList) {

			foreach (Users use in usersList) {
            if (use.Username != username.text && username.text != "") {
                NotExits.SetActive (false);
                Blank.SetActive (false);
                Debug.Log ("! User Name Does Not Exists");
                InName.text = "! user name Does Not Exists";
                InName.color = Color.red;

            }
            if (use.Username != username.text && username.text != "") {
                NotExits.SetActive (false);
                Blank.SetActive (false);
                Debug.Log ("Incorect Password");
                InPass.text = "! InCorrect Password";
                InPass.color = Color.red;

            }
         




            foreach (Users user in usersList) {

                if (user.Username == username.text && user.Password != password.text && username.text != "" && password.text != "") {
                    NotExits.SetActive (false);
                    Blank.SetActive (false);
                    Debug.Log ("Incorect Password");
                    InPass.text = "! Incorrect Password";
                    InPass.color = Color.red;

                }
                if (user.Username == username.text) {
                    Debug.Log ("√ Valid UserName ");
                    InName.text = "√ Valid UserName  ";
                    InName.color = Color.green;

                }
                if (user.Username == username.text && user.Password == password.text) {
                    Debug.Log ("√ Valid Password");
                    InPass.text = "√ Valid Password";
                    InPass.color = Color.green;
                }

            }
        }
    }


        //}
        
        //}

    

    //private void DeactivateInName () {
    //    InName.text = "";

    //}
    //private void DeactivateInPass () {
    //    InPass.text = "";

    //}
    //private void DeactivateCanvas () {
    //    UsernotExists.SetActive (false);
    //}
    private void ValidetePassword (string input) {
        if (input.Length < MinPassword || input.Length > MaxPassword) {
            Debug.Log ("Password Must Be Between" + MinPassword + "And" + MaxPassword + "characters");
            Password.text = "! Password Must Be Between 6 to 8";
            Password.color = Color.red;
            //addressInput.text = "";
            //landmarkInput.text = "";
            //addressInput.interactable = false;
            //landmarkInput.interactable = false;

            button.interactable = false;
        } else {
            Password.text = "√ Password Is Valid";
            Password.color = Color.green;
            button.interactable = true;
            //addressInput.interactable = true;
            //landmarkInput.interactable = true;
            Debug.Log ("Password Is Valided");
        }
    }
    public void ResetPassword () {
        ForgetCanvas.SetActive (true);
        


        foreach (Users use in usersList) {

            
            

            if (use.Username == forgetname.text && use.Email == forgetEmail.text && NewPassword.text != "") {
                if (use.Username == forgetname.text && use.Email == forgetEmail.text && NewPassword.text == Confirm.text ) {
                    use.Password = NewPassword.text;
                    Debug.Log ("Reset SuccessFully");
                    ResetSuccess.text = " √ Password Reset SuccessFully ";
                    ResetSuccess.color = Color.green;
                    ForgetCanvas.SetActive (false);
                    LoginCanvas.SetActive (true);
                    Invoke ("DisableReset", 1f);
                }
            }
   //         if(use.Username==forgetname.text) {
   //             Debug.Log ("√ Valid Username");
   //             NotValidName.text = "√ Valid Username";
   //             NotValidName.color = Color.green;
			//}
            //if (use.Username != forgetname.text && forgetname.text != "") {
            //    Debug.Log ("! Please Enter Valid Username");
            //    NotValidName.text = "! Please Enter Valid Userame";
            //    NotValidName.color = Color.red;

            //}

        }

    }
    public void ForgetFill() {
        if (forgetname.text == "") {
            Debug.Log ("! Please Fill The Fields");
            NotValidName.text = "! Please fill UserName Field";
            NotValidName.color = Color.red;


        }  if (forgetEmail.text == "") {
            Debug.Log ("! Please Fill The Fields");
            ForgetEmail.text = "! please Fill Email Field";
            ForgetEmail.color = Color.red;

        }  if (NewPassword.text == "") {
            Debug.Log ("! Please Fill The Fields");
            ForgetNewPass.text = "! please Fill NewPassword Field";
            ForgetNewPass.color = Color.red;

        }  if (Confirm.text == "") {
            Debug.Log ("!Please Fill the Fields");
            ConfirmPassword.text = "! please fill Confirm Password Field";
            ConfirmPassword.color = Color.red;

        }  if (forgetname.text != "") {
            Debug.Log ("√ Fully Filled");
            NotValidName.text = "√ Valid UserName";
            NotValidName.color = Color.green;


        } if (forgetEmail.text != "") {
            Debug.Log ("√ Fully Filled");
            ForgetEmail.text = "√ Valid Email";
            ForgetEmail.color = Color.green;
        }

        //}  if (NewPassword.text != "") {
        //    Debug.Log ("√ fully Filled");
        //    ForgetNewPass.text = "√ Valid Password";
        //    ForgetNewPass.color = Color.green;


        //} 
        if (Confirm.text != "") {
            Debug.Log ("√ fully Filled");
            ConfirmPassword.text = "√ Valid Confirm Password";
            ConfirmPassword.color = Color.green;

        }
       
        foreach (Users userchack in usersList) {
            if (userchack.Username != forgetname.text && forgetname.text != "") {
                Debug.Log ("! Please Enter Valid Username");
                NotValidName.text = "! Please Enter Valid Userame";
                NotValidName.color = Color.red;
               

            }
   //         if(userchack.Username!=forgetname.text&&forgetname.text!="") {
   //             Debug.Log ("! Incorrect Email");
   //             ForgetEmail.text = "! Incorrect Email";
   //             ForgetEmail.color = Color.red;
			//}
            foreach (Users user in usersList) {
                if (user.Username == forgetname.text) {
                    Debug.Log ("√ Valid UserName");
                    NotValidName.text = "√ Valid UserName";
                    NotValidName.color = Color.green;
                }


                //if (use.Password == NewPassword.text) {
                //    Debug.Log ("! Please Enter New Password This Is Your Old Password ");
                //    OldPassword.text = "";
                //    OldPassword.text = "! Please Enter New Password This is Your Old Password ";
                //    OldPassword.color = Color.red;

                //}
                if (user.Username == forgetname.text && user.Email != forgetEmail.text && forgetEmail.text != "") {
                    Debug.Log ("incorrect Password ");
                    ForgetEmail.text = "! incorrect Email";
                    ForgetEmail.color = Color.red;

                }
                if (NewPassword.text != Confirm.text && Confirm.text != "") {
                        Debug.Log ("password Do Not Match");
                        ConfirmPassword.text = "! Password Do not Match";
                        ConfirmPassword.color = Color.red;

                    }
                }

            }
        
    }



    private void ValidPassword (string Input) {
        if (Input.Length < MinPassword || Input.Length > MaxPassword) {
            Debug.Log ("Password Must Be Between" + MinPassword + "And" + MaxPassword + "Characters");
            ForgetNewPass.text = "! Password Must Be Between 6 to 8";
            ForgetNewPass.color = Color.red;
            Reset.interactable = false;
            //Canform.text = "";
            //Canform.interactable = false;

        } else {
            ForgetNewPass.text = "";
            ForgetNewPass.text = "√ valid Password";
            ForgetNewPass.color = Color.green;
            Reset.interactable = true;
            //Canform.interactable = true;
            Debug.Log (" Valid Password");

        }
    }

    //private void DeactivateFname () {
    //    NotValidName.text = "";
    //}
    //private void DeactivateOldPassword () {
    //    OldPassword.text = "";

    //}
    //private void DisableNotMatch () {
    //    CanformPassword.text = "";

    //}
    private void DisableReset () {
        ResetSuccess.text = "";
        LoginCanvas.SetActive (true);
        ForgetCanvas.SetActive (false);
        //Panel.SetActive (false);
        //Resetpassword.SetActive (false);

    }
}
